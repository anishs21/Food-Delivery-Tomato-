name: Deploy Frontend and Admin to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Establish VPN connection with failover
      - name: Establish VPN connection with failover
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

          echo "Trying OFFICE-2 VPN first..."
          # --- Office-2 VPN (no username/password) ---
          echo "${{ secrets.VPN_CONFIG_2 }}" > vpn-config-2.ovpn
          sudo openvpn --config vpn-config-2.ovpn --daemon
          sleep 15

          if ping -c 1 8.8.8.8 &> /dev/null; then
            echo "OFFICE-2 VPN CONNECTION ESTABLISHED SUCCESSFULLY."
          else
            echo "OFFICE-2 VPN CONNECTION FAILED, trying OFFICE-1..."
            sudo pkill openvpn || true

            # --- Office-1 VPN (username/password required) ---
            echo "${{ secrets.VPN_CONFIG_1 }}" > vpn-config-1.ovpn
            echo "${{ secrets.VPN_USERNAME_1 }}" > vpn-credentials-1.txt
            echo "${{ secrets.VPN_PASSWORD_1 }}" >> vpn-credentials-1.txt
            chmod 600 vpn-credentials-1.txt

            sudo openvpn --config vpn-config-1.ovpn \
              --auth-user-pass vpn-credentials-1.txt \
              --daemon
            sleep 15

            if ping -c 1 8.8.8.8 &> /dev/null; then
              echo "OFFICE-1 VPN CONNECTION ESTABLISHED SUCCESSFULLY."
            else
              echo "Both VPN connections failed."
              exit 1
            fi
          fi

      # Step 3: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 4: Build frontend
      - name: Build frontend
        run: |
          cd frontend
          npm install
          npm run build

      # Step 5: Copy frontend build to EC2
      - name: Deploy frontend build to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "frontend/dist/"
          target: "/var/www/html/frontend/dist"
          strip_components: 1

      # Step 6: Build admin panel
      - name: Build admin panel
        run: |
          cd admin
          npm install
          npm run build

      # Step 7: Copy admin build to EC2
      - name: Deploy admin build to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "admin/dist/"
          target: "/var/www/html/admin/dist"
          strip_components: 1

      # Step 8: Restart Nginx on EC2
      - name: Restart Nginx
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo systemctl restart nginx
